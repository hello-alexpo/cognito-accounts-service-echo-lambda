AWSTemplateFormatVersion: 2010-09-09
Description: Creates an API gateway that's backed by a Lambda function
Parameters:
  APIName:
    Description: Name of the API to create
    Type: String
    AllowedPattern: '[A-Za-z0-9]*'
    MinLength: '4'
    MaxLength: '2048'
    ConstraintDescription: must contain only alphanumeric characters (at least four)
    Default: EchoApi
  APIDescription:
    Description: Description of the API to create
    Type: String
    Default: No description provided. Provide 'APIDescription' param to override this.
  APIPath:
    Description: URL path for the API
    Type: String
    Default: api
    AllowedPattern: '[A-Za-z0-9]*'
    MinLength: '1'
    MaxLength: '64'
    ConstraintDescription: must contain only alphanumeric characters (1-64 chars)
  APIStageName:
    Description: Stage name to deploy the API to
    Type: String
    Default: dev
    AllowedPattern: '[A-Za-z0-9]*'
    MinLength: '1'
    MaxLength: '64'
    ConstraintDescription: must contain only alphanumeric characters (1-64 chars)
  LambdaCodeBucket:
    Description: Name of the S3 bucket that's storing the Lamba function's zip file
    Type: String
    Default: com.workingbit.lambda-functions-dev-eu-west-1
  LambdaCodePath:
    Description: Path to the zip file of code for the Lambda function
    Type: String
    Default: snapshot/echo-0.0.1-SNAPSHOT-lambda.zip
  APIGatewayCustomResourceARN:
    Description: >-
      The ARN pointing to the Lambda function that creates custom API gateway
      resources (install from
      https://apigatewaycloudformation.bynordenfelt.com/). Example:
      arn:aws:lambda:us-east-1:123456789012:function:APIGatewayCustomResource-LambdaFunction-ABCDEFG123
    Type: String
    Default: arn:aws:lambda:eu-west-1:089753065094:function:ApiGatewayCloudFormationStack-LambdaFunction-SW85819GZZLN
  DynamoReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '10000'
    ConstraintDescription: must be between 1 and 10000
  DynamoWriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '10000'
    ConstraintDescription: must be between 1 and 10000
  S3Bucket:
    Type: String
    Description: >-
      S3 bucket to use for artifacts. Just bucket Name; not URL. IAM user should
      have access to the bucket.
    Default: com.workingbit.lambda-functions-dev-eu-west-1
  S3Key:
    Type: String
    Description: S3 key within S3Bucket.
    Default: aws-codepipeline-s3-aws-codedeploy_linux.zip
  PipelineAWSAccountId:
    Type: String
    NoEcho: 'true'
    Description: AWS Account ID accessing the pipeline
    Default: 089753065094
Resources:
  LambdaCodePipelineExecutionPolicy:
    DependsOn:
      - CodePipelineLambdaRole
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: LambdaRolePolicy
      Roles:
        - !Ref CodePipelineLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource:
              - 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
              - 'codepipeline:PutJobSuccessResult'
              - 'codepipeline:PutJobFailureResult'
            Resource:
              - '*'
  CrossAccountPipelineViewersRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref PipelineAWSAccountId
                  - ':root'
            Action: 'sts:AssumeRole'
      Path: /
  CrossAccountPipelineViewersPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - CodePipelineStack
      - CrossAccountPipelineViewersRole
    Properties:
      PolicyName: CrossAccountPipelineViewersPolicy
      Roles:
        - !Ref CrossAccountPipelineViewersRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionTypes'
              - 'codepipeline:ListPipelines'
              - 'iam:ListRoles'
              - 's3:GetBucketPolicy'
              - 's3:GetObject'
              - 's3:ListAllMyBuckets'
              - 's3:ListBucket'
              - 'codedeploy:GetApplication'
              - 'codedeploy:GetDeploymentGroup'
              - 'codedeploy:ListApplications'
              - 'codedeploy:ListDeploymentGroups'
              - 'elasticbeanstalk:DescribeApplications'
              - 'elasticbeanstalk:DescribeEnvironments'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:ListFunctions'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:codepipeline:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Ref CodePipelineStack
  CodePipelineLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  BackingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - CodePipelineLambdaRole
      - LambdaCodePipelineExecutionPolicy
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodePath
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !Ref APIName
      Handler: com.workingbit.echo.LambdaHandler::handleRequest
      MemorySize: 256
      Role: !GetAtt
        - BackingLambdaExecutionRole
        - Arn
      Runtime: java8
      Timeout: 300
  BackingLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UseDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource: !Join
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref APIDynamoDBTable
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  BackingLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - BackingLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
  CodePipelineStack:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - BackingLambdaFunction
    Properties:
      RoleArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':role/AWS-CodePipeline-Service'
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              OutputArtifacts:
                - Name: Echo
              Configuration:
                S3Bucket: !Ref S3Bucket
                S3ObjectKey: !Ref S3Key
              RunOrder: 1
        - Name: Commit
          Actions:
            - InputArtifacts: []
              Name: IAMPermissions
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              OutputArtifacts: []
              Configuration:
                FunctionName: !Ref BackingLambdaFunction
                UserParameters: !Ref 'AWS::StackName'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
  MainAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !Ref APIName
      Description: !Ref APIDescription
  MainAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: 'test'
      ParentId: !GetAtt
        - MainAPI
        - RootResourceId
      RestApiId: !Ref MainAPI
  EchoAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: 'echo'
      ParentId: !Ref MainAPIResource
      RestApiId: !Ref MainAPI
#  EchoResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
##      restApiId: !Ref MainAPI
##      parentId: !Ref MainAPIResource
#      pathPart: echo
#      corsConfiguration:
#        allowMethods:
#          - GET
#        allowHeaders:
#          - x-my-header
#          - some-other-header
#        allowDefaultHeaders: true
#        allowOrigin: '*'
#        exposeHeaders:
#          - some-header
#          - x-another-header
#        maxAge: 1800
  APIMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      HttpMethod: GET
      Integration:
        Uri: !Join
          - ':'
          - - 'arn:aws:apigateway'
            - !Ref 'AWS::Region'
            - 'lambda:path/2015-03-31/functions/arn:aws:lambda'
            - !Ref 'AWS::Region'
            - !Ref 'AWS::AccountId'
            - function
            - !Join
              - /
              - - !Join
                  - '-'
                  - - !Ref 'AWS::StackName'
                    - !Ref APIName
                - invocations
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
  DeployApi:
    Type: 'Custom::ApiDeploy'
    DependsOn:
      - APIMethodGet
#      - APIMethodPost
    Properties:
      ServiceToken: !Ref APIGatewayCustomResourceARN
      restApiId: !Ref MainAPI
      stageName: !Ref APIStageName
#      stageConfig:
#        cacheClusterEnabled: false
      methodSettings: {}
      stageVariables:
        testVar1: testValue1
        testVar2: testValue2
  APIDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: GUID
          AttributeType: S
      KeySchema:
        - AttributeName: GUID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref DynamoReadCapacityUnits
        WriteCapacityUnits: !Ref DynamoWriteCapacityUnits
Outputs:
  LambdaName:
    Value: !Ref BackingLambdaFunction
    Description: The Lambda function
  TableName:
    Value: !Ref APIDynamoDBTable
    Description: The DynamoDB table
  MainAPI:
    Value: !Ref MainAPI
    Description: The main API gateway
  APIDeployment:
    Value: !Ref DeployApi
    Description: The deployment of the API
  CodePipelineURL:
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/codepipeline/home?region='
        - !Ref 'AWS::Region'
        - '#/view/'
        - !Ref CodePipelineStack
  CrossAcccountIAMRole:
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/iam/home?region='
        - !Ref 'AWS::Region'
        - '#roles/'
        - !Ref CrossAccountPipelineViewersRole
